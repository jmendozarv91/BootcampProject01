openapi: 3.0.0
info:
  title: Yanki User and Wallet Service API
  description: API for managing users and their wallets in the Yanki system.
  version: "1.0.0"
servers:
  - url: http://localhost:8050/v1
    description: Dev server
paths:
  /users:
    post:
      summary: Creates a new user and associated wallet.
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /users/{user_id}:
    get:
      summary: Gets a user's information.
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Updates a user's information.
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Deletes a specific user and their associated wallet.
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/{user_id}/wallet:
    get:
      summary: Gets wallet information for a user.
      operationId: getWalletByUserId
      tags:
        - Wallet
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/{user_id}/wallet/transactions:
    post:
      summary: Performs a transaction on the user's wallet.
      operationId: walletTransaction
      tags:
        - Wallet
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransaction'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
components:
  schemas:
    NewUserRequest:
      type: object
      properties:
        document_type:
          type: string
        document_number:
          type: string
        phone_number:
          type: string
        imei:
          type: string
        email:
          type: string
        password:
          type: string
        security_questions:
          type: array
          items:
            $ref: '#/components/schemas/SecurityQuestion'
    SecurityQuestion:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
        settings:
          $ref: '#/components/schemas/Settings'
    UserResponse:
      type: object
      properties:
        id:
          type: string
        document_type:
          type: string
        document_number:
          type: string
        phone_number:
          type: string
        imei:
          type: string
        email:
          type: string
        settings:
          $ref: '#/components/schemas/Settings'
    WalletResponse:
      type: object
      properties:
        user_id:
          type: string
        balance:
          type: number
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    WalletTransaction:
      type: object
      properties:
        type:
          type: string
          enum: [credit, debit]
        amount:
          type: number
        source_phone_number:
          type: string
    Transaction:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum: [credit, debit]
        amount:
          type: number
        related_user:
          type: string
    Settings:
      type: object
      properties:
        language:
          type: string
        currency:
          type: string